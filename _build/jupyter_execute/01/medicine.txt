# **Medicine Resource**


## Exploring Medicine Resource from DBPedia with SparQL, and Plotly.




First, we need to install *matplotlib*, and do some housekeeping to prepare the necessary libraries. We then import *pyplot* and *Basemap*, for generating a geographical map.

!pip install matplotlib

!apt-get install libgeos-3.5.0
!apt-get install libgeos-dev
!pip install https://github.com/matplotlib/basemap/archive/master.zip

!pip install pyproj==1.9.6

import matplotlib.pyplot as plt
from mpl_toolkits.basemap import Basemap

## Statistics over Linked Data

Here we'll see how we can use standard data analytics over RDF data, via *Pandas*. Pandas is a library for data manipulation and analysis, especially useful for numeric table data.

import pandas as pd, urllib
from pandas.plotting import scatter_matrix

# Medicine - Dbpedia

query = """
select distinct ?predicate ?object
where {
dbr:Medicine ?predicate ?object
}
LIMIT 100
"""
endpoint = "http://dbpedia.org/sparql"

# We need to encode the query string for the HTTP request.
param = urllib.parse.urlencode({'default-graph-uri': 'http://dbpedia.org', 
                                'query': query, 
                                'format': 'text/csv'})

We read the data from the SPARQL endpoint using it as a REST service. The data is returned in CSV, through implicit content negotiation, and is loaded directly using Pandas.

data = pd.read_csv(endpoint + '?' + param)
print(data)

# Medicine property - sameAs

query = """
select distinct ?object
where {
dbr:Medicine owl:sameAs ?object
}
"""
endpoint = "http://dbpedia.org/sparql"

# We need to encode the query string for the HTTP request.
param = urllib.parse.urlencode({'default-graph-uri': 'http://dbpedia.org', 
                                'query': query, 
                                'format': 'text/csv'})

data = pd.read_csv(endpoint + '?' + param)
print(data)

# Medicine property - academicDiscipline

query = """
select distinct ?subject
where {
 ?subject dbo:academicDiscipline dbr:Medicine .
}
"""
endpoint = "http://dbpedia.org/sparql"

# We need to encode the query string for the HTTP request.

param = urllib.parse.urlencode({'query': query})

query = """
select distinct ?person ?name ?birthPlace ?birthLat ?birthLong ?deathPlace ?deathLat ?deathLong 
where { ?person dbo:academicDiscipline  dbr:Medicine ;
                           dbo:birthPlace ?birthPlace ;
                           dbo:deathPlace ?deathPlace ;
                           dbp:name ?name .
                       ?birthPlace  geo:lat ?birthLat ;
                         geo:long ?birthLong .
                       ?deathPlace geo:lat ?deathLat ;
                                            geo:long ?deathLong .
}

"""
endpoint = "http://dbpedia.org/sparql"

# We need to encode the query string for the HTTP request.
param = urllib.parse.urlencode({'default-graph-uri': 'http://dbpedia.org', 
                                'query': query, 
                                'format': 'text/csv'})

data = pd.read_csv(endpoint + '?' + param)
print(data)

# Birth place of people which Medicine is their academic discipline

fig = plt.figure(figsize=(8, 8))
m = Basemap(projection='cyl', resolution=None,
            llcrnrlat=-90, urcrnrlat=90,
            llcrnrlon=-180, urcrnrlon=180, )
m.etopo(scale=0.5, alpha=0.5)

for index, row in data.iterrows():
    x, y = m(row['birthLong'], row['birthLat'])
    plt.plot(x, y, 'ok', markersize=5)
    #plt.text(x, y, row['name'], fontsize=12);
    plt.text(x, y, '', fontsize=12);

# Death place of people which Medicine is their academic discipline

fig = plt.figure(figsize=(8, 8))
m = Basemap(projection='cyl', resolution=None,
            llcrnrlat=-90, urcrnrlat=90,
            llcrnrlon=-180, urcrnrlon=180, )
m.etopo(scale=0.5, alpha=0.5)

for index, row in data.iterrows():
    x, y = m(row['deathLong'], row['deathLat'])
    plt.plot(x, y, 'ok', markersize=5)
    #plt.text(x, y, row['name'], fontsize=12);
    plt.text(x, y, '', fontsize=12);

# Medicine property - activeSector

query = """
select distinct ?activitySectorName ?fieldName 
 where {?Thing dbp:activitySector dbr:Medicine ;
                        dbp:name ?activitySectorName .
                ?field dbp:field ?Thing.
              ?field dbp:name ?fieldName .
FILTER (lang(?activitySectorName ) = 'en')
FILTER (lang(?fieldName ) = 'en')
}
Limit 1100
"""
endpoint = "http://dbpedia.org/sparql"

# We need to encode the query string for the HTTP request.
param = urllib.parse.urlencode({'default-graph-uri': 'http://dbpedia.org', 
                                'query': query, 
                                'format': 'text/csv'})

data = pd.read_csv(endpoint + '?' + param)

data.shape[0]



data.loc[-1] = ['', 'activitySector']  # adding a row
data.index = data.index + 1  # shifting index
data.sort_index(inplace=True)

col_names =  ['activitySectorName', 'fieldName']
tempDataFrame  = pd.DataFrame(columns = col_names)

for i in range(data.shape[0]):
  tempDataFrame.loc[i] = ['activitySector', str(data['activitySectorName'][i])]


data

tempDataFrame

tempDataFrame = tempDataFrame.append(data, ignore_index=True)
tempDataFrame = tempDataFrame.drop_duplicates()
tempDataFrame

# Medicine Diseases based on activity sector - Tree Map

namesTemp = []
parentsTemp = []
for item in tempDataFrame['fieldName']:
  namesTemp.extend(["" +str(item)])
for item in tempDataFrame['activitySectorName']:
  parentsTemp.extend(["" +item])

import plotly.express as px
fig = px.treemap(
    names = namesTemp,
    parents = parentsTemp
)
fig.show()

# Medicine property - discipline

query = """
select distinct  ?name ?impactFactor ?openAccess
where { 
?Thing dbp:discipline dbr:Medicine ;
           dbo:impactFactor ?impactFactor ;
          dbo:openAccessContent ?openAccess ;
           foaf:name ?name .
           
}
"""
endpoint = "http://dbpedia.org/sparql"

# We need to encode the query string for the HTTP request.
param = urllib.parse.urlencode({'default-graph-uri': 'http://dbpedia.org', 
                                'query': query, 
                                'format': 'text/csv'})

data = pd.read_csv(endpoint + '?' + param)
print(data)

# Impact factor of medical jurnals

import plotly.graph_objects as px
import numpy as np


plot = px.Figure(data=[px.Scatter(
	x=data['name'],
	y=data['impactFactor'],
	mode='markers',)
])

# Add dropdown
plot.update_layout(
	updatemenus=[
		dict(
			buttons=list([
				dict(
					args=["type", "scatter"],
					label="Scatter Plot",
					method="restyle"
				),
				dict(
					args=["type", "bar"],
					label="Bar Chart",
					method="restyle"
				)
			]),
			direction="down",
		),
	]
)

plot.show()

# Which of the medical jurnals have open access along with their imapct factor

openAccessUniqueValues =  data['openAccess'].str.lower().unique()

import plotly.graph_objects as px
import plotly.graph_objs as go
import numpy



plot = px.Figure(data=[go.Bar(
	name='Yes',
	x=data.loc[data['openAccess'] == 'Yes']['name'],
	y=data.loc[data['openAccess'] == 'Yes']['impactFactor']
),
	go.Bar(
	name='Hybrid',
	x=data.loc[data['openAccess'] == 'Hybrid']['name'],
	y=data.loc[data['openAccess'] == 'Hybrid']['impactFactor']
),
	go.Bar(
	name='Hybrid option available to authors',
	x=data.loc[data['openAccess'] == 'Hybrid option available to authors']['name'],
	y=data.loc[data['openAccess'] == 'Hybrid option available to authors']['impactFactor']
),
	go.Bar(
	name='Delayed, after 6 months',
	x=data.loc[data['openAccess'] == 'Delayed, after 6 months']['name'],
	y=data.loc[data['openAccess'] == 'Delayed, after 6 months']['impactFactor']
),
	go.Bar(
	name='Delayed',
	x=data.loc[data['openAccess'] == 'Delayed']['name'],
	y=data.loc[data['openAccess'] == 'Delayed']['impactFactor']
),
	go.Bar(
	name='Yes (since June 2018)',
	x=data.loc[data['openAccess'] == 'Yes (since June 2018)']['name'],
	y=data.loc[data['openAccess'] == 'Yes (since June 2018)']['impactFactor']
),
	go.Bar(
	name='Immediate free access',
	x=data.loc[data['openAccess'] == 'Immediate free access']['name'],
	y=data.loc[data['openAccess'] == 'Immediate free access']['impactFactor']
),
	go.Bar(
	name='Diamond',
	x=data.loc[data['openAccess'] == 'Diamond']['name'],
	y=data.loc[data['openAccess'] == 'Diamond']['impactFactor']
),
	go.Bar(
	name='Yes, noarticle processing charges',
	x=data.loc[data['openAccess'] == 'Yes, noarticle processing charges']['name'],
	y=data.loc[data['openAccess'] == 'Yes, noarticle processing charges']['impactFactor']
),
	go.Bar(
	name='After 12 months',
	x=data.loc[data['openAccess'] == 'After 12 months']['name'],
	y=data.loc[data['openAccess'] == 'After 12 months']['impactFactor']
)
  
])


# Add dropdown
plot.update_layout(
	updatemenus=[
		dict(
			active=0,
			buttons=list([
				dict(label="Both",
					method="update",
					args=[{"visible": [True, True,True, True, True, True, True, True, True, True]},
						{"title": "Both"}]),
				dict(label="Yes",
					method="update",
					args=[{"visible": [True, False, False, False, False, False, False, False, False, False]},
						{"title": "Yes",
							}]),
				dict(label="Hybrid",
					method="update",
					args=[{"visible": [False, True, False, False, False, False, False, False, False, False]},
						{"title": "Hybrid",
							}]),
            dict(label="Hybrid option available to authors",
        method="update",
        args=[{"visible": [False, False, True, False, False, False, False, False, False, False]},
          {"title": "Hybrid option available to authors",
            }]),
            dict(label="Delayed, after 6 months",
        method="update",
        args=[{"visible": [False, False, False, True, False, False, False, False, False, False]},
          {"title": "Delayed, after 6 months",
            }]),
            dict(label="Delayed",
        method="update",
        args=[{"visible": [False, False, False, False, True, False, False, False, False, False]},
          {"title": "Delayed",
            }]),
            dict(label="Yes (since June 2018)",
        method="update",
        args=[{"visible": [False, False, False, False, False, True, False, False, False, False]},
          {"title": "Yes (since June 2018)",
            }]),
             dict(label="Immediate free access",
        method="update",
        args=[{"visible": [False, False, False, False, False, False, True, False,False, False]},
          {"title": "Immediate free access",
            }]),
            dict(label="Diamond",
        method="update",
        args=[{"visible": [False, False, False, False, False, False, False, True, False, False]},
          {"title": "Diamond",
            }]),
             dict(label="Yes, noarticle processing charges",
        method="update",
        args=[{"visible": [False, False, False, False, False, False, False,False, True, False]},
          {"title": "Yes, noarticle processing charges",
            }]),
            dict(label="After 12 months",
        method="update",
        args=[{"visible": [False, False, False, False, False, False, False,False,False, True]},
          {"title": "After 12 months",
            }]),
			]),
		)
	])

plot.show()



# Medicine property - industryof

query = """
select distinct  ?name  ?abstract ?thumbnail 
 where {?Thing dbo:industry dbr:Medicine ;
                        dbo:abstract ?abstract ;
                        dbp:name ?name .
                         OPTIONAL {?Thing dbo:thumbnail  ?thumbnail .} 
FILTER (lang(?abstract ) = 'en')
FILTER (lang(?name) = 'en')
}
"""
endpoint = "http://dbpedia.org/sparql"

# We need to encode the query string for the HTTP request.
param = urllib.parse.urlencode({'default-graph-uri': 'http://dbpedia.org', 
                                'query': query, 
                                'format': 'text/csv'})

data = pd.read_csv(endpoint + '?' + param)
print(data)

# Entities from Medical Industry

!pip install ipyplot

import ipyplot
from urllib.request import urlopen
from PIL import Image


images_list = []
labels = []
for item in  data['thumbnail'].dropna():
  url = str(item)
  print(url)
  try:
    conn = urllib.request.urlopen(url)
  except urllib.error.HTTPError as e:
      # Return code error (e.g. 404, 501, ...)
      # ...
      print('HTTPError: {}'.format(e.code))
  except urllib.error.URLError as e:
      # Not an HTTP-specific error (e.g. connection refused)
      # ...
      print('URLError: {}'.format(e.reason))
  else:
      # 200
      # ...
      print('good')
      img = Image.open(urlopen(url))
      images_list.extend([img])
      labels.extend(data.loc[data['thumbnail'] == str(item)]['name'])
  #img = Image.open(urlopen(url))
  #images_list.extend([img]) 
#ipyplot.plot_images(images_list, max_images=20, img_width=150)

ipyplot.plot_images(images_list,labels, max_images=20, img_width=230)

import plotly.graph_objs as go

fig = go.Figure(data=[go.Table(
    header=dict(values=['Name', 'Abstract'],
                line_color='darkslategray',
                fill_color='lightskyblue',
                align='left'),
    cells=dict(values=[data['name'], # 1st column
                       data['abstract']],
               line_color='darkslategray',
               fill_color='lightcyan',
               align='left'))
])

# fig.update_layout(width=500, height=300)
fig.show()